apiVersion: v1
kind: PersistentVolumeClaim
metadata:

  name: database
  labels:
    "bookstore/example": bookstore
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# deploy the MySQL server container

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql
  labels:
       "bookstore/example": bookstore
spec:

  replicas: 1

  revisionHistoryLimit: 5

  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql
        name: mysql

        env:

          - name: MYSQL_ROOT_PASSWORD
            valueFrom:

              secretKeyRef:
                name: mysql-credentials

                key: rootpw

          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: user

          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: password

          - name: MYSQL_DATABASE
            value: bookstore

        livenessProbe:
          tcpSocket:
            port: 3306

        ports:

        - containerPort: 3306

        volumeMounts:
        - mountPath: /var/lib/mysql

          subPath: data

          name: database
      volumes:

      - name: database
        persistentVolumeClaim:
          claimName: database

---
# expose a pod on mysql.default.svc.cluster.local to the rest of the cluster

apiVersion: v1

kind: Service
metadata:

  name: mysql
  labels:
    "bookstore/example": bookstore
spec:

  type: ClusterIP
  ports:

  - port: 3306
    protocol: TCP

  selector:
    app: mysql